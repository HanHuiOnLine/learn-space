#这是注释
#以#开头的语句是注释，注释是给人看的，可以是任意内容，解释器会忽略掉注释。
#其他每一行都是一个语句，当语句以冒号:结尾时，缩进的语句视为代码块。
a = 100
if a >= 0:
    print(a)
else:
    print(-a)
	
#在Python中，等号=是赋值语句，可以把任意数据类型赋值给变量，同一个变量可以反复赋值，而且可以是不同类型的变量，例如：
b = 100
print(b)
b = 'abc'
print(b)	

#也可以把一个变量a赋值给另一个变量b，这个操作实际上是把变量b指向变量a所指向的数据，例如下面的代码：
c = b
b = 'edf'
print('c =', c)	
#结果是abc

#python中的除法
#1.用/除,计算结果是浮点数，即使是两个整数恰好整除，结果也是浮点数
print(10/3)
#2.用//除,也叫地板除,两个整数的除法仍然是整数(只取整数部分)：
print(10//3)

#由于Python源代码也是一个文本文件，所以，当你的源代码中包含中文的时候，在保存源代码时，
#就需要务必指定保存为UTF-8编码。当Python解释器读取源代码时，为
#了让它按UTF-8编码读取，我们通常在文件开头写上这两行(括号里面的)：
#(#!/usr/bin/env python3)
#(# -*- coding: utf-8 -*-)

#格式化字符串
#我们经常会输出类似'亲爱的xxx你好！你xx月的话费是xx，余额是xx'之类的字符串，
#而xxx的内容都是根据变量变化的，所以，需要一种简便的格式化字符串的方式
#在Python中，采用的格式化方式和C语言是一致的，用%实现，举例如下：
print('hello, %s'%'world')
#输出hello, world
print('hi, %s, you have $%d.' % ('Michael', 1000))
#输出Hi, Michael, you have $1000000.

#你可能猜到了，%运算符就是用来格式化字符串的。在字符串内部，
#%s表示用字符串替换，%d表示用整数替换，有几个%?占位符，后面就跟几个变量或者值，
#顺序要对应好。如果只有一个%?，括号可以省略。
#常见的占位符有：
#%d 整数
#%f 浮点数
#%s 字符串
#%x 十六进制整数

#其中，格式化整数和浮点数还可以指定是否补0和整数与小数的位数：
print('%02d-%04d' % (3, 1))
#输出'03-0001'
print('%.2f' % 3.1415926)
#输出'3.14'

#如果你不太确定应该用什么，%s永远起作用，它会把任何数据类型转换为字符串：
print('Age: %s. Gender: %s' % (25, True))
#输出'Age: 25. Gender: True'

#有些时候，字符串里面的%是一个普通字符怎么办？这个时候就需要转义，用%%来表示一个%：
print('growth rate: %d%%' % 7)
#输出'growth rate: 7%'


#练习
#小明的成绩从去年的72分提升到了今年的85分，请计算小明成绩提升的百分点，并用字符串格式化显示出'xx.x%'，只保留小数点后1位：
s1 = 72
s2 = 85
r = (s2-s1)/s1*100
print('小明的成绩提升了: %.1f%%' % r)
#小明的成绩提升了: 18.1%















